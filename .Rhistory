usethis::use_mit_license("Shixiang Wang")
usethis::use_package("cowsay", type = "Suggests")
devtools::load_all(".")
hello()
usethis::use_readme_rmd()
usethis::use_git()
.GV = setClass("GV",
representation(CNV = "CNV",
MAF = "MAF"))
library(usethis)
?use_roxygen_md
use_roxygen_md()
install.packages('roxygen2md')
install.packages('roxygen2md')
devtools::load_all(".")
?MAF
?CopyNumber
?GenomicVariation
use_package("data.table")
devtools::load_all(".")
?GenomicVariation
?GenomicVariation
?GenomicVariation
devtools::load_all(".")
?GenomicVariation
str(mtcars)
str(mtcars, max.level = 1)
str(mtcars, max.level = 2)
tt = list(mtcars)
tt
str(tt, max.level = 2)
str(tt, max.level = 1)
laml.maf <- system.file("extdata", "tcga_laml.maf.gz", package = "maftools")
cowsay::say("Read data as S4 object")
cowsay::say("Read data as S4 object", by = "spider")
use_package("maftools")
?rea_maf
?read_maf
laml <- read_maf(maf = laml.maf)
laml <- read_maf(maf = laml.maf)
devtools::load_all(".")
laml <- read_maf(maf = laml.maf)
?read_copynumber
devtools::load_all(".")
?read_copynumber
?read_copynumber
mtcars
cols = colnames(mtcars)[1:3]
mtcars2 = data.table::as.data.table(mtcars)
mtcars
mtcars2[, cols]
mtcars2[, ..cols]
tt2 = list(mtcars, mtcars)
data.table::rbindlist(tt2)
mtcars2[, ..cols]
mtcars2[, ..c(cols, "vs")]
mtcars2[, c(cols, "vs")]
mtcars2[, .c(cols, "vs")]
mtcars2[, c(cols, "vs"), with = FALSE]
mtcars2[, cols, with = FALSE]
?data.table::setcolorder
test = function(){a = data.table::data.table(a = 1, b = 2, c = 3); a}
test()
a
a
mtcars2
library(data.table)
setcolorder(mtcars2, neworder = c("vs", "gear"))
mtcars
mtcars2
getOption("datatable.verbose")
mtcars2[, cols, with = FALSE]
colnames(mtcars2)[1] = "1"
head(mtcars2)
?read_copynumber
NULL %in% colnames(mtcars)
NULL %in% colnames(mtcars) | is.null(NULL)
is.null(NULL)
is.null(NULL) | NULL %in% colnames(mtcars)
is.null(NULL) | length(NULL %in% colnames(mtcars))
is.null("tt") | length("tt" %in% colnames(mtcars))
length("tt" %in% colnames(mtcars))
("tt" %in% colnames(mtcars)
)
("tt" %in% colnames(mtcars)
)
"tt" %in% colnames(mtcars)
NULL %in% colnames(mtcars) ==
logical(0)
NULL %in% colnames(mtcars) == logical(0)
length(NULL %in% colnames(mtcars))
length("tt" %in% colnames(mtcars))
"tt" %in% colnames(mtcars)
head(mtcars2)
mtcars2[, "new"] = 0
mtcars2
mtcars2[, "new"]
unique(mtcars2[, "new"] )
unique(mtcars2[["new"]] )
stop("column ", "yes", "does not exist.")
?rbindlist
rbindlist(tt)
mtcars2[, .N]
mtcars2[, .N, by = .(cyl)]
mtcars2[, .N, by = .(cyl)][["cyl"]]
mtcars2[, .N, by = .(cyl)][N>8]
mtcars2[, .N, by = .(cyl)][N>8][["cyl"]]
?read_copynumber
?read_copynumber
is.data.frame(mtcars2)
devtools::load_all(".")
?read_copynumber
system.file("extdata", package = "sigminer")
extdata_dir = system.file("extdata", package = "sigminer")
dir(extdata_dir)
cp =  read_copynumber(extdata_dir, genome_build = "hg38", verbose = TRUE)
cp
debug(read_copynumber)
cp = read_copynumber(extdata_dir, genome_build = "hg19", verbose = TRUE)
files_path
files_path[i]
View(temp)
devtools::load_all(".")
debug(read_copynumber)
cp = read_copynumber(extdata_dir, genome_build = "hg19", verbose = TRUE)
View(temp)
View(temp)
View(temp)
View(temp)
View(annot)
cp
?read_maf
laml.maf <- system.file("extdata", "tcga_laml.maf.gz", package = "maftools")
laml <- read_maf(maf = laml.maf)
laml@summary
laml
devtools::load_all(".")
cp
devtools::load_all(".")
cp = read_copynumber(extdata_dir, genome_build = "hg19", verbose = TRUE)
cp
str(cp)
str(cp, max.level = 1)
str(cp, max.level = 2)
?GenomicVariation
?CopyNumber
?read_copynumber
devtools::load_all(".")
?read_copynumber
#------------ Test reading as GenomicVariation object
vt = read_variation(cp,  laml)
t1 = data.table()
inherits(t1, "data.table")
devtools::load_all(".")
#------------ Test reading as GenomicVariation object
vt = read_variation(cp,  laml)
vt
str(vt)
str(vt, max.level = 1)
str(vt, max.level = 2)
vt
laml
cp
vt
print(vt)
str(vt)
str(vt, max.level = 2)
devtools::load_all(".")
vt
devtools::load_all(".")
cp
laml
devtools::load_all(".")
laml
devtools::load_all(".")
cp
vt
devtools::load_all(".")
laml
vt
cp
devtools::load_all(".")
laml
vt
cp
devtools::load_all(".")
cp
laml
vt
?read_copynumber
use_package("foreach")
use_package("doParallel")
use_package("flexmix")
?get_ArmLocation
?get_ArmLocation
devtools::load_all(".")
use_package("NMF")
use_package("cowplot")
use_package("RColorBrewer")
use_package("methods")
