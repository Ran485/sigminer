usethis::use_mit_license("Shixiang Wang")
usethis::use_package("cowsay", type = "Suggests")
devtools::load_all(".")
hello()
usethis::use_readme_rmd()
usethis::use_git()
.GV = setClass("GV",
representation(CNV = "CNV",
MAF = "MAF"))
library(usethis)
?use_roxygen_md
use_roxygen_md()
install.packages('roxygen2md')
install.packages('roxygen2md')
devtools::load_all(".")
?MAF
?CopyNumber
?GenomicVariation
use_package("data.table")
devtools::load_all(".")
?GenomicVariation
?GenomicVariation
?GenomicVariation
devtools::load_all(".")
?GenomicVariation
str(mtcars)
str(mtcars, max.level = 1)
str(mtcars, max.level = 2)
tt = list(mtcars)
tt
str(tt, max.level = 2)
str(tt, max.level = 1)
laml.maf <- system.file("extdata", "tcga_laml.maf.gz", package = "maftools")
cowsay::say("Read data as S4 object")
cowsay::say("Read data as S4 object", by = "spider")
use_package("maftools")
?rea_maf
?read_maf
laml <- read_maf(maf = laml.maf)
laml <- read_maf(maf = laml.maf)
devtools::load_all(".")
laml <- read_maf(maf = laml.maf)
?read_copynumber
devtools::load_all(".")
?read_copynumber
?read_copynumber
mtcars
cols = colnames(mtcars)[1:3]
mtcars2 = data.table::as.data.table(mtcars)
mtcars
mtcars2[, cols]
mtcars2[, ..cols]
tt2 = list(mtcars, mtcars)
data.table::rbindlist(tt2)
mtcars2[, ..cols]
mtcars2[, ..c(cols, "vs")]
mtcars2[, c(cols, "vs")]
mtcars2[, .c(cols, "vs")]
mtcars2[, c(cols, "vs"), with = FALSE]
mtcars2[, cols, with = FALSE]
?data.table::setcolorder
test = function(){a = data.table::data.table(a = 1, b = 2, c = 3); a}
test()
a
a
mtcars2
library(data.table)
setcolorder(mtcars2, neworder = c("vs", "gear"))
mtcars
mtcars2
getOption("datatable.verbose")
mtcars2[, cols, with = FALSE]
colnames(mtcars2)[1] = "1"
head(mtcars2)
?read_copynumber
NULL %in% colnames(mtcars)
NULL %in% colnames(mtcars) | is.null(NULL)
is.null(NULL)
is.null(NULL) | NULL %in% colnames(mtcars)
is.null(NULL) | length(NULL %in% colnames(mtcars))
is.null("tt") | length("tt" %in% colnames(mtcars))
length("tt" %in% colnames(mtcars))
("tt" %in% colnames(mtcars)
)
("tt" %in% colnames(mtcars)
)
"tt" %in% colnames(mtcars)
NULL %in% colnames(mtcars) ==
logical(0)
NULL %in% colnames(mtcars) == logical(0)
length(NULL %in% colnames(mtcars))
length("tt" %in% colnames(mtcars))
"tt" %in% colnames(mtcars)
head(mtcars2)
mtcars2[, "new"] = 0
mtcars2
mtcars2[, "new"]
unique(mtcars2[, "new"] )
unique(mtcars2[["new"]] )
stop("column ", "yes", "does not exist.")
?rbindlist
rbindlist(tt)
mtcars2[, .N]
mtcars2[, .N, by = .(cyl)]
mtcars2[, .N, by = .(cyl)][["cyl"]]
mtcars2[, .N, by = .(cyl)][N>8]
mtcars2[, .N, by = .(cyl)][N>8][["cyl"]]
?read_copynumber
?read_copynumber
is.data.frame(mtcars2)
devtools::load_all(".")
?read_copynumber
system.file("extdata", package = "sigminer")
extdata_dir = system.file("extdata", package = "sigminer")
dir(extdata_dir)
cp =  read_copynumber(extdata_dir, genome_build = "hg38", verbose = TRUE)
cp
debug(read_copynumber)
cp = read_copynumber(extdata_dir, genome_build = "hg19", verbose = TRUE)
files_path
files_path[i]
View(temp)
devtools::load_all(".")
debug(read_copynumber)
cp = read_copynumber(extdata_dir, genome_build = "hg19", verbose = TRUE)
View(temp)
View(temp)
View(temp)
View(temp)
View(annot)
cp
?read_maf
laml.maf <- system.file("extdata", "tcga_laml.maf.gz", package = "maftools")
laml <- read_maf(maf = laml.maf)
laml@summary
laml
devtools::load_all(".")
cp
devtools::load_all(".")
cp = read_copynumber(extdata_dir, genome_build = "hg19", verbose = TRUE)
cp
str(cp)
str(cp, max.level = 1)
str(cp, max.level = 2)
?GenomicVariation
?CopyNumber
?read_copynumber
devtools::load_all(".")
?read_copynumber
#------------ Test reading as GenomicVariation object
vt = read_variation(cp,  laml)
t1 = data.table()
inherits(t1, "data.table")
devtools::load_all(".")
#------------ Test reading as GenomicVariation object
vt = read_variation(cp,  laml)
vt
str(vt)
str(vt, max.level = 1)
str(vt, max.level = 2)
vt
laml
cp
vt
print(vt)
str(vt)
str(vt, max.level = 2)
devtools::load_all(".")
vt
devtools::load_all(".")
cp
laml
devtools::load_all(".")
laml
devtools::load_all(".")
cp
vt
devtools::load_all(".")
laml
vt
cp
devtools::load_all(".")
laml
vt
cp
devtools::load_all(".")
cp
laml
vt
?read_copynumber
use_package("foreach")
use_package("doParallel")
use_package("flexmix")
?get_ArmLocation
?get_ArmLocation
devtools::load_all(".")
use_package("NMF")
use_package("cowplot")
use_package("RColorBrewer")
use_package("methods")
extdata_dir = system.file("extdata", package = "sigminer")
dir(extdata_dir)
#------------ Test reading as CopyNumber object
cp = read_copynumber(extdata_dir, pattern = "txt", genome_build = "hg19", verbose = TRUE)
devtools::load_all(".")
extdata_dir = system.file("extdata", package = "sigminer")
dir(extdata_dir)
#------------ Test reading as CopyNumber object
cp = read_copynumber(extdata_dir, pattern = "txt", genome_build = "hg19", verbose = TRUE)
#------------ Test reading as MAF object
laml.maf <- system.file("extdata", "tcga_laml.maf.gz", package = "maftools")
laml <- read_maf(maf = laml.maf)
#------------ Test reading as GenomicVariation object
vt = read_variation(cp,  laml)
vt
?predict.lm
?predict
?prepare_maf
?sig_prepare
?prepare_maf
#-------------- NMF prepare for MAF ------------#
laml.tnm <- prepare_maf(maf = laml, ref_genome = 'BSgenome.Hsapiens.UCSC.hg19',
prefix = 'chr', add = TRUE, useSyn = TRUE)
laml.tnm$nmf_matrix
str(laml.tnm$nmf_matrix)
#--- prepare series
cn_matrix3 = prepare_copynumber(cp)
View(cn_matrix3)
t = laml.tnm$nmf_matrix
?sig_prepare
#- Prepare CopyNumber
nmf_matrix.cp = sig_prepare(cp)
devtools::load_all(".")
#- Prepare CopyNumber
nmf_matrix.cp = sig_prepare(cp)
nmf_matrix.maf = sig_prepare(maf = laml, ref_genome = 'BSgenome.Hsapiens.UCSC.hg19',
prefix = 'chr', add = TRUE, useSyn = TRUE)
nmf_matrix.maf = sig_prepare(laml, ref_genome = 'BSgenome.Hsapiens.UCSC.hg19',
prefix = 'chr', add = TRUE, useSyn = TRUE)
devtools::load_all(".")
nmf_matrix.maf = sig_prepare(laml, ref_genome = 'BSgenome.Hsapiens.UCSC.hg19',
prefix = 'chr', add = TRUE, useSyn = TRUE)
?sig_prepare
?sig_prepare.CopyNumber
sig_prepare(vt)
devtools::load_all(".")
nmf_matrix.maf = sig_prepare(laml, ref_genome = 'BSgenome.Hsapiens.UCSC.hg19',
prefix = 'chr', add = TRUE, useSyn = TRUE)
NMF::predict()
?NMF::predict
?NMF::nmfEstimateRank
nmf.getOption('shared.memory')
NMF::nmf.getOption('shared.memory')
?sig_estimate
?sig_estimate
devtools::load_all(".")
#- Signature best rank estimation
sig_estimate(laml.tnm$nmf_matrix)
devtools::load_all(".")
#- Signature best rank estimation
sig_estimate(laml.tnm$nmf_matrix)
devtools::load_all(".")
#- Signature best rank estimation
sig_estimate(laml.tnm$nmf_matrix)
devtools::load_all(".")
#- Signature best rank estimation
sig_estimate(laml.tnm$nmf_matrix)
path.package()
NMF::nmfEstimateRank
#- Signature best rank estimation
debug(sig_estimate)
#- Signature best rank estimation
sig_estimate(laml.tnm$nmf_matrix)
estim.r <-
NMF::nmfEstimateRank(
mat,
range,
method = method,
nrun = nrun,
verbose = verbose,
seed = seed)
estim.r <-
NMF::nmfEstimateRank(
mat,
range,
method = method,
nrun = nrun,
verbose = T,
seed = seed)
library(NMF)
estim.r <-
NMF::nmfEstimateRank(
mat,
range,
method = method,
nrun = nrun,
verbose = T,
seed = seed)
devtools::load_all(".")
#- Signature best rank estimation
sig_estimate(laml.tnm$nmf_matrix)
#- Signature best rank estimation
sig_estimate(laml.tnm$nmf_matrix, pConstant = 0.01)
maftools::extractSignatures(laml.tnm$nmf_matrix)
maftools::extractSignatures(laml.tnm$nmf_matrix)
maftools::extractSignatures(laml.tnm)
#- Signature best rank estimation
sig_estimate(laml.tnm$nmf_matrix, pConstant = 0.01, nrun = 3)
laml@data
laml.tnm2 = maftools::trinucleotideMatrix(maf = laml, ref_genome = 'BSgenome.Hsapiens.UCSC.hg19',
prefix = 'chr', add = TRUE, useSyn = TRUE)
#-------------- NMF prepare for MAF ------------#
laml.tnm <- prepare_maf(maf = laml, ref_genome = 'BSgenome.Hsapiens.UCSC.hg19',
prefix = 'chr', add = TRUE, useSyn = TRUE)
identical(laml.tnm2, laml.tnm)
#------------- Test Maftools ----------------
require(maftools)
laml.maf = system.file('extdata', 'tcga_laml.maf.gz', package = 'maftools') #path to TCGA LAML MAF file
laml.clin = system.file('extdata', 'tcga_laml_annot.tsv', package = 'maftools') # clinical information containing survival information and histology. This is optional
laml = read.maf(maf = laml.maf, clinicalData = laml.clin)
library(BSgenome.Hsapiens.UCSC.hg19, quietly = TRUE)
laml.tnm = trinucleotideMatrix(maf = laml, prefix = 'chr', add = TRUE, ref_genome = "BSgenome.Hsapiens.UCSC.hg19")
library('NMF')
laml.sign = extractSignatures(mat = laml.tnm, nTry = 6, plotBestFitRes = FALSE)
laml.sign = extractSignatures(mat = laml.tnm, nTry = 6, plotBestFitRes = FALSE, pConstant = 0.01)
#------------- Test Maftools ----------------
require(maftools)
laml.maf = system.file('extdata', 'tcga_laml.maf.gz', package = 'maftools') #path to TCGA LAML MAF file
laml.clin = system.file('extdata', 'tcga_laml_annot.tsv', package = 'maftools') # clinical information containing survival information and histology. This is optional
laml = read.maf(maf = laml.maf, clinicalData = laml.clin)
library(BSgenome.Hsapiens.UCSC.hg19, quietly = TRUE)
laml.tnm = trinucleotideMatrix(maf = laml, prefix = 'chr', add = TRUE, ref_genome = "BSgenome.Hsapiens.UCSC.hg19")
library('NMF')
laml.sign = extractSignatures(mat = laml.tnm, nTry = 6, plotBestFitRes = FALSE)
laml.sign = extractSignatures(mat = laml.tnm, nTry = 6, plotBestFitRes = FALSE, pConstant = 0.01)
devtools::session_info()
#-------------- NMF prepare for Copy Number ------------#
example_data = system.file("extdata", "example_cn_list.RData", package = "sigminer")
load(example_data)
devtools::load_all(".")
#-------------- NMF prepare for Copy Number ------------#
example_data = system.file("extdata", "example_cn_list.RData", package = "sigminer")
load(example_data)
tcga_segTabs2 = lapply(tcga_segTabs, data.table::as.data.table)
#---- get series
features = get_features(tcga_segTabs)
#---- get series
features = get_features(tcga_segTabs)
#---- get series
features = get_features(tcga_segTabs2)
debug(get_features)
#---- get series
features = get_features(tcga_segTabs2)
getBPnum(CN_data, chrlen)
debug(getBPnum)
chrlen
devtools::load_all(".")
tcga_segTabs2 = lapply(tcga_segTabs,
function(x) {
data.table::as.data.table(x)
x$chromosome = paste0("chr", x$chromosome),
x})
x$chromosome = paste0("chr", x$chromosome)
tcga_segTabs2 = lapply(tcga_segTabs,
function(x) {
data.table::as.data.table(x)
x$chromosome = paste0("chr", x$chromosome)
x})
#---- get series
features = get_features(tcga_segTabs2)
tcga_segTabs2 = lapply(tcga_segTabs,
function(x) {
data.table::as.data.table(x)
x$chromosome = paste0("chr", x$chromosome)
data.table::as.data.table(x)})
#---- get series
features = get_features(tcga_segTabs2)
debug(get_features)
#---- get series
features = get_features(tcga_segTabs2)
debug(getBPnum)
class(segTab)
chrlen
chrlen[chrlen[, 1] == c, 2]
devtools::load_all(".")
#---- get series
features = get_features(tcga_segTabs2)
#---- get series
features = get_features(tcga_segTabs2)
debug(get_features)
#---- get series
features = get_features(tcga_segTabs2)
getBPnum(CN_data, chrlen)
debug(getBPnum)
print("Processing samps ", samps)
#########################################
getBPnum2 <- function(abs_profiles, chrlen)
{
out <- c()
samps <- names(abs_profiles)
for (i in samps)
{
print("Processing samps ", samps)
segTab <- abs_profiles[[i]]
chrs <- unique(segTab$chromosome)
allBPnum <- c()
for (c in chrs)
{
currseg <- segTab[chromosome == c,]
print("Processing chrs ", c)
intervals <-
seq(1, chrlen[chrlen[, 1] == c, 2] + 10000000, 10000000)
res <-
hist(currseg$end[-nrow(currseg)],
breaks = intervals,
plot = FALSE)$counts
allBPnum <- c(allBPnum, res)
}
out <-
rbind(out, cbind(ID = rep(i, length(allBPnum)), value = allBPnum))
}
rownames(out) <- NULL
data.frame(out, stringsAsFactors = F)
}
getBPnum2(tcga_segTabs2, chrlen = sigminer::chromsize.hg19)
#########################################
getBPnum2 <- function(abs_profiles, chrlen)
{
out <- c()
samps <- names(abs_profiles)
for (i in samps)
{
message("Processing samps ", samps)
segTab <- abs_profiles[[i]]
chrs <- unique(segTab$chromosome)
allBPnum <- c()
for (c in chrs)
{
currseg <- segTab[chromosome == c,]
message("Processing chrs ", c)
intervals <-
seq(1, chrlen[chrlen[, 1] == c, 2] + 10000000, 10000000)
res <-
hist(currseg$end[-nrow(currseg)],
breaks = intervals,
plot = FALSE)$counts
allBPnum <- c(allBPnum, res)
}
out <-
rbind(out, cbind(ID = rep(i, length(allBPnum)), value = allBPnum))
}
rownames(out) <- NULL
data.frame(out, stringsAsFactors = F)
}
getBPnum2(tcga_segTabs2, chrlen = sigminer::chromsize.hg19)
#########################################
getBPnum2 <- function(abs_profiles, chrlen)
{
out <- c()
samps <- names(abs_profiles)
for (i in samps)
{
message("Processing samps ", i)
segTab <- abs_profiles[[i]]
chrs <- unique(segTab$chromosome)
allBPnum <- c()
for (c in chrs)
{
currseg <- segTab[chromosome == c,]
message("Processing chrs ", c)
intervals <-
seq(1, chrlen[chrlen[, 1] == c, 2] + 10000000, 10000000)
res <-
hist(currseg$end[-nrow(currseg)],
breaks = intervals,
plot = FALSE)$counts
allBPnum <- c(allBPnum, res)
}
out <-
rbind(out, cbind(ID = rep(i, length(allBPnum)), value = allBPnum))
}
rownames(out) <- NULL
data.frame(out, stringsAsFactors = F)
}
getBPnum2(tcga_segTabs2, chrlen = sigminer::chromsize.hg19)
tt = tcga_segTabs2[["TCGA-06-0190-01A-01D-0236-01"]]
View(tt)
tcga_segTabs2 = lapply(tcga_segTabs,
function(x) {
data.table::as.data.table(x)
x$chromosome = paste0("chr", x$chromosome)
x = subset(x, chromosome %in% paste0("chr", 1:22))
data.table::as.data.table(x)})
#---- get series
features = get_features(tcga_segTabs2)
devtools::load_all(".")
#---- get series
features = get_features(tcga_segTabs2)
components = get_components(features)
inp_matrix = get_matrix(features, components)
sig_estimate(inp_matrix)
sig_estimate(inp_matrix, verbose = TRUE)
usethis::use_appveyor()
usethis::use_travis()
